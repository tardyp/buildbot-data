{"version":3,"sources":["data.module.coffee","data.config.coffee","data.constant.coffee","specification.constant.coffee","mock/generator.service.coffee","services/data/data.service.coffee","services/data/dbstores.constant.coffee","services/dataUtils/dataUtils.service.coffee","services/indexeddb/indexeddb.service.coffee","services/rest/rest.service.coffee","services/socket/socket.service.coffee","services/socket/webSocketBackend.service.coffee","services/tabex/tabex.service.coffee","services/data/collection/collection.service.coffee","services/data/wrapper/wrapper.service.coffee"],"names":[],"mappings":"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","file":"scripts.js","sourcesContent":["# Register new module\nclass App extends App\n    constructor: ->\n        return []\n","class HttpConfig extends Config\n    constructor: ($httpProvider) ->\n        # configure $http service to combine processing\n        # of multiple http responses received at around\n        # the same time via $rootScope.$applyAsync\n        $httpProvider.useApplyAsync(true)\n        ### @ngInject ###\n        $httpProvider.interceptors.push ($log, API) ->\n            return request: (config) ->\n                # log API request only\n                if config.url.indexOf(API) is 0\n                    $log.debug(\"#{config.method} #{config.url}\")\n                return config\n","class Api extends Constant\n    constructor: -> return 'api/v2/'\n","# Class specification contains the fields and paths for every type\n# n: number\n# i: identifier\nclass Specification extends Constant\n    constructor: ->\n        return {\n            FIELDTYPES:\n                IDENTIFIER: 'i'\n                NUMBER: 'n'\n\n            builds:\n                id: 'buildid'\n                fields: [\n                    'buildid'\n                    'builderid'\n                    'buildrequestid'\n                    'buildslaveid'\n                    'complete'\n                    'complete_at'\n                    'masterid'\n                    'number'\n                    'results'\n                    'started_at'\n                    'state_string'\n                ]\n                root: true\n                paths: [\n                    'changes'\n                    'properties'\n                    'steps'\n                    'steps/i:name'\n                    'steps/i:name/logs'\n                    'steps/i:name/logs/i:slug'\n                    'steps/i:name/logs/i:slug/contents'\n                    'steps/i:name/logs/i:slug/raw'\n                    'steps/n:number'\n                    'steps/n:number/logs'\n                    'steps/n:number/logs/i:slug'\n                    'steps/n:number/logs/i:slug/contents'\n                    'steps/n:number/logs/i:slug/raw'\n                ]\n                static:\n                    complete: true\n            builders:\n                id: 'builderid'\n                identifier: 'name'\n                fields: [\n                    'builderid'\n                    'description'\n                    'name'\n                    'tags'\n                ]\n                root: true\n                paths: [\n                    'forceschedulers'\n                    'buildrequests'\n                    'masters'\n                    'masters/n:masterid'\n                    'buildslaves'\n                    'buildslaves/i:name'\n                    'buildslaves/n:buildslaveid'\n                    'builds'\n                    'builds/n:number'\n                    'builds/n:number/steps'\n                    'builds/n:number/steps/i:name'\n                    'builds/n:number/steps/i:name/logs'\n                    'builds/n:number/steps/i:name/logs/i:slug'\n                    'builds/n:number/steps/i:name/logs/i:slug/contents'\n                    'builds/n:number/steps/i:name/logs/i:slug/raw'\n                    'builds/n:number/steps/n:number'\n                    'builds/n:number/steps/n:number/logs'\n                    'builds/n:number/steps/n:number/logs/i:slug'\n                    'builds/n:number/steps/n:number/logs/i:slug/contents'\n                    'builds/n:number/steps/n:number/logs/i:slug/raw'\n                ]\n                static: true\n            buildrequests:\n                id: 'buildrequestid'\n                fields: [\n                    'buildrequestid'\n                    'builderid'\n                    'buildsetid'\n                    'claimed'\n                    'claimed_at'\n                    'claimed_by_masterid'\n                    'complete'\n                    'complete_at'\n                    'priority'\n                    'results'\n                    'submitted_at'\n                    'waited_for'\n                ]\n                root: true\n                paths: [\n                    'builds'\n                ]\n                static:\n                    complete: true\n            buildsets:\n                id: 'bsid'\n                fields: [\n                    'bsid'\n                    'complete'\n                    'complete_at'\n                    'external_idstring'\n                    'parent_buildid'\n                    'parent_relationship'\n                    'reason'\n                    'results'\n                    'sourcestamps'\n                    'submitted_at'\n                ]\n                root: true\n                paths: [\n                    'properties'\n                ]\n                static:\n                    complete: true\n            buildslaves:\n                id: 'buildslaveid'\n                fields: [\n                    'buildslaveid'\n                    'configured_on'\n                    'connected_to'\n                    'name'\n                    'slaveinfo'\n                ]\n                root: true\n                paths: []\n                static: true\n            changes:\n                id: 'changeid'\n                fields: [\n                    'changeid'\n                    'author'\n                    'branch'\n                    'category'\n                    'codebase'\n                    'comments'\n                    'files'\n                    'parent_changeids'\n                    'project'\n                    'properties'\n                    'repository'\n                    'revision'\n                    'revlink'\n                    'sourcestamp'\n                    'when_timestamp'\n                ]\n                root: true\n                paths: []\n                static: true\n            changesources:\n                id: 'changesourceid'\n                fields: [\n                    'changesourceid'\n                    'master'\n                    'name'\n                ]\n                root: true\n                paths: []\n                static: true\n            forceschedulers:\n                id: 'name'\n                fields: [\n                    'name'\n                    'all_fields'\n                    'builder_names'\n                    'label'\n                ]\n                root: true\n                paths: []\n                static: true\n            masters:\n                id: 'masterid'\n                fields: [\n                    'masterid'\n                    'active'\n                    'last_active'\n                    'name'\n                ]\n                root: true\n                paths: [\n                    'builders'\n                    'builders/n:builderid'\n                    'builders/n:builderid/buildslaves'\n                    'builders/n:builderid/buildslaves/n:buildslaveid'\n                    'builders/n:builderid/buildslaves/i:name'\n                    'buildslaves'\n                    'buildslaves/i:name'\n                    'buildslaves/n:buildslaveid'\n                    'changesources'\n                    'changesources/n:changesourceid'\n                    'schedulers'\n                    'schedulers/n:schedulerid'\n                ]\n                static: true\n            schedulers:\n                id: 'schedulerid'\n                fields: [\n                    'schedulerid'\n                    'master'\n                    'name'\n                ]\n                root: true\n                paths: []\n                static: true\n            sourcestamps:\n                id: 'ssid'\n                fields: [\n                    'ssid'\n                    'branch'\n                    'codebase'\n                    'created_at'\n                    'patch'\n                    'project'\n                    'repository'\n                    'revision'\n                ]\n                root: true\n                paths: [\n                    'changes'\n                ]\n                static: true\n\n            steps:\n                id: 'stepid'\n                identifier: 'name'\n                fields: [\n                    'stepid'\n                    'buildid'\n                    'complete'\n                    'complete_at'\n                    'hidden'\n                    'name'\n                    'number'\n                    'results'\n                    'started_at'\n                    'state_string'\n                    'urls'\n                ]\n                root: false\n                paths: [\n                    'logs'\n                    'logs/i:slug'\n                    'logs/i:slug/contents'\n                    'logs/i:slug/raw'\n                ]\n                static:\n                    complete: true\n            logs:\n                id: 'logid'\n                identifier: 'slug'\n                fields: [\n                    'logid'\n                    'complete'\n                    'name'\n                    'num_lines'\n                    'slug'\n                    'stepid'\n                    'type'\n                ]\n                root: false\n                paths: [\n                    'contents'\n                    'raw'\n                ]\n                static:\n                    complete: true\n            contents:\n                id: null\n                fields: [\n                    'logid'\n                    'logchunks'\n                    'firstline'\n                ]\n                root: false\n                restField: 'logchunks'\n            properties:\n                id: null\n                fields: []\n                root: false\n    }\n","# types for generating test data: null, number, string, boolean, timestamp, <array>[], <object>, <objectName in Specification>\nclass Generator extends Service\n    self = null\n    constructor: ->\n        self = @\n\n    number: (min = 0, max = 100) ->\n        random = Math.random() * (max - min) + min\n        Math.floor(random)\n\n    ids: {}\n    id: (name = '') ->\n        self.ids[name] ?= 0\n        self.ids[name]++\n\n    boolean: -> Math.random() < 0.5\n\n    timestamp: (after = Date.now()) ->\n        date = new Date(after + self.number(1, 1000000))\n        Math.floor(date.getTime() / 1000)\n\n    string: (length) ->\n        if length? then length++\n        self.number(100, Number.MAX_VALUE).toString(36).substring(0, length)\n\n    array: (fn, args...) ->\n        times = self.number(1, 10)\n        array = []\n        for i in [1..times]\n            array.push fn(args...)\n        return array\n","class Data extends Provider\n    cache: true\n    config = null\n    constructor: ->\n        config = cache: @cache\n\n    ### @ngInject ###\n    $get: ($log, $injector, $q, $window, Collection, restService, dataUtilsService, tabexService, indexedDBService, SPECIFICATION) ->\n        return new class DataService\n            self = null\n            constructor: ->\n                self = @\n                angular.extend(@, config)\n                # generate loadXXX functions for root endpoints\n                endpoints = Object.keys(SPECIFICATION).filter (e) -> SPECIFICATION[e].id?\n                @constructor.generateEndpoints(endpoints)\n\n            clearCache: ->\n                indexedDBService.clear().then ->\n                    if $injector.has('$state')\n                        $injector.get('$state').reload()\n                    else if $injector.has('$route')\n                        $injector.get('$route').reload()\n                    else\n                        $window.location.reload()\n\n            # the arguments are in this order: endpoint, id, child, id of child, query\n            get: (args...) ->\n\n                [restPath, query] = @processArguments(args)\n                query.subscribe ?= false\n\n                # up to date collection, this will be returned\n                collection = @createCollection(restPath, query)\n                collection.subscribe()\n\n            # register return values for the mocked get function\n            mocks: {}\n            spied: false\n            when: (args...) ->\n                [url, query, returnValue] = args\n                if not returnValue?\n                    [query, returnValue] = [{}, query]\n                if jasmine? and not @spied\n                    spyOn(@, 'get').and.callFake(@_mockGet)\n                    @spied = true\n\n                @mocks[url] ?= {}\n                @mocks[url][query] = returnValue\n\n            # register return values with the .when function\n            # when testing get will return the given values\n            _mockGet: (args...) ->\n                [url, query] = @processArguments(args)\n                queryWithoutSubscribe = angular.copy(query)\n                delete queryWithoutSubscribe.subscribe\n                returnValue = @mocks[url]?[query] or @mocks[url]?[queryWithoutSubscribe]\n                if not returnValue? then throw new Error(\"No return value for: #{url} (#{angular.toJson(query)})\")\n                collection = @createCollection(url, query)\n                collection.from(returnValue)\n                p = $q.resolve(collection)\n                p.getArray = -> collection\n                return p\n\n            # for easier testing\n            createCollection: (args...) ->\n                new Collection(args...)\n\n            processArguments: (args) ->\n                # keep defined arguments only\n                args.filter (e) -> e?\n                # get the query parameters\n                [..., last] = args\n                if angular.isObject(last)\n                    query = args.pop()\n                restPath = dataUtilsService.restPath(args)\n                return [restPath, query or {}]\n\n            control: (url, method, params = {}) ->\n                @jsonrpc ?= 1\n                restService.post url,\n                    id: @jsonrpc++\n                    jsonrpc: '2.0'\n                    method: method\n                    params: params\n\n            # generate functions for root endpoints\n            @generateEndpoints: (endpoints) ->\n                endpoints.forEach (e) =>\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    @::[\"get#{E}\"] = (args...) =>\n                        self.get(e, args...)\n\n            # opens a new accessor\n            open: (scope) ->\n                return new class DataAccessor\n                    collections = []\n                    constructor: ->\n                        @collections = collections\n                        # generate getXXX functions for root endpoints\n                        endpoints = Object.keys(SPECIFICATION).filter (e) -> SPECIFICATION[e].id?\n                        @constructor.generateEndpoints(endpoints)\n\n                        if scope? then @closeOnDestroy(scope)\n\n                    # calls unsubscribe on each root classes\n                    close: ->\n                        collections.forEach (c) -> c.unsubscribe?()\n\n                    # closes the group when the scope is destroyed\n                    closeOnDestroy: (scope) ->\n                        if not angular.isFunction(scope.$on)\n                            throw new Error(\"Parameter 'scope' doesn't have an $on function\")\n                        scope.$on '$destroy', => @close()\n\n                    # generate functions for root endpoints\n                    @generateEndpoints: (endpoints) ->\n                        endpoints.forEach (e) =>\n                            E = dataUtilsService.capitalize(e)\n                            @::[\"get#{E}\"] = (args...) =>\n                                last = args[args.length - 1]\n                                if angular.isObject(last)\n                                    last.subscribe ?= true\n                                else args.push(subscribe: true)\n                                p = self[\"get#{E}\"](args...)\n                                collections.push(p.getArray())\n                                return p\n","class DBStores extends Constant\n    constructor: ->\n        return {\n            paths: '&[path+query],path,query,lastActive'\n        }\n","class DataUtils extends Service\n    constructor: (SPECIFICATION) ->\n        return new class dataUtilsService\n            # capitalize first word\n            capitalize: (string) ->\n                string[0].toUpperCase() + string[1..].toLowerCase()\n\n            # returns the type of the endpoint\n            type: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # if the argument count is even, the last argument is an id\n                if a.length % 2 is 0 then a.pop()\n                a.pop()\n\n            # singularize the type name\n            singularType: (arg) ->\n                @type(arg).replace(/s$/, '')\n\n            socketPath: (arg) ->\n                a = @copyOrSplit(arg)\n                # if the argument count is even, the last argument is an id\n                stars = ['*']\n                # is it odd?\n                if a.length % 2 is 1 then stars.push('*')\n                a.concat(stars).join('/')\n\n            restPath: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                a.join('/')\n\n            endpointPath: (arg) ->\n                # if the argument count is even, the last argument is an id\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # is it even?\n                if a.length % 2 is 0 then a.pop()\n                a.join('/')\n\n            copyOrSplit: (arrayOrString) ->\n                if angular.isArray(arrayOrString)\n                    # return a copy\n                    arrayOrString[..]\n                else if angular.isString(arrayOrString)\n                    # split the string to get an array\n                    arrayOrString.split('/')\n                else\n                    throw new TypeError(\"Parameter 'arrayOrString' must be a array or a string, not #{typeof arrayOrString}\")\n\n            unWrap: (data, path) ->\n                type = @type(path)\n                type = SPECIFICATION[type]?.restField or type\n                data[type]\n\n            parse: (object) ->\n                for k, v of object\n                    try\n                        object[k] = angular.fromJson(v)\n                    catch error then # ignore\n                return object\n\n            numberOrString: (str = null) ->\n                # if already a number\n                if angular.isNumber(str) then return str\n                # else parse string to integer\n                number = parseInt str, 10\n                if !isNaN(number) then number else str\n\n            emailInString: (string) ->\n                if not angular.isString(string)\n                    throw new TypeError(\"Parameter 'string' must be a string, not #{typeof string}\")\n                emailRegex = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/\n                emailRegex.exec(string).pop() or ''\n","class IndexedDB extends Service\n    constructor: ($log, $injector, $q, $window, dataUtilsService, DBSTORES, SPECIFICATION) ->\n        return new class IndexedDBService\n            constructor: ->\n                @db = new $window.Dexie('BBCache')\n                stores = {}\n                angular.extend stores, @processSpecification(SPECIFICATION), DBSTORES\n                @db.version(1).stores(stores)\n\n                # global db error handler\n                @db.on 'error', (e) -> $log.error(e)\n                # open the database\n                @open()\n\n            open: ->\n                $q (resolve) =>\n                    @db.open()\n                    .catch (e) -> $log.error 'indexedDBService: open', e\n                    .finally -> resolve()\n\n            clear: ->\n                $q (resolve) =>\n                    @db.delete()\n                    .catch (e) -> $log.error 'indexedDBService: clear', e\n                    .finally => @open().then -> resolve()\n\n            get: (url, query = {}) ->\n                $q (resolve, reject) =>\n                    @processUrl(url).then ([tableName, q, id]) =>\n                        angular.extend query, q\n\n                        if not SPECIFICATION[tableName]?\n                            resolve([])\n                            return\n\n                        table = @db[tableName]\n                        @db.transaction 'r', table, =>\n\n                            # convert promise to $q implementation\n                            if id?\n                                table.get(id).then (e) => resolve dataUtilsService.parse(e)\n                                return\n\n                            table.toArray().then (array) =>\n                                array = array.map (e) => dataUtilsService.parse(e)\n\n                                # 1. filtering\n                                filters = []\n                                for fieldAndOperator, value of query\n                                    if ['field', 'limit', 'offset', 'order'].indexOf(fieldAndOperator) < 0\n                                        filters[fieldAndOperator] = value\n                                array = @filter(array, filters, tableName)\n\n                                # 2. sorting\n                                order = query?.order\n                                array = @sort(array, order)\n\n                                # 3. pagination\n                                offset = query?.offset\n                                limit = query?.limit\n                                array = @paginate(array, offset, limit)\n\n                                # TODO 4. properties\n                                property = query?.property\n                                array = @properties(array, property)\n\n                                # 5. fields\n                                fields = query?.field\n                                array = @fields(array, fields)\n\n                                resolve(array)\n\n            filter: (array, filters, tableName) ->\n                array.filter (v) ->\n                    for fieldAndOperator, value of filters\n                        if ['on', 'true', 'yes'].indexOf(value) > -1 then value = true\n                        else if ['off', 'false', 'no'].indexOf(value) > -1 then value = false\n                        [field, operator] = fieldAndOperator.split('__')\n                        switch operator\n                            when 'ne' then cmp = v[field] != value\n                            when 'lt' then cmp = v[field] <  value\n                            when 'le' then cmp = v[field] <= value\n                            when 'gt' then cmp = v[field] >  value\n                            when 'ge' then cmp = v[field] >= value\n                            else cmp = v[field] == value or\n                                (angular.isArray(v[field]) and value in v[field]) or\n                                # private fields added by the data service\n                                v[\"_#{field}\"] == value or\n                                (angular.isArray(v[\"_#{field}\"]) and value in v[\"_#{field}\"])\n                        if !cmp then return false\n                    return true\n\n            sort: (array, order) ->\n                compare = (property) ->\n                    if property[0] is '-'\n                        property = property[1..]\n                        reverse = true\n\n                    return (a, b) ->\n                        if reverse then [a, b] = [b, a]\n\n                        if a[property] < b[property] then -1\n                        else if a[property] > b[property] then 1\n                        else 0\n\n                copy = array[..]\n                if angular.isString(order)\n                    copy.sort compare(order)\n                else if angular.isArray(order)\n                    copy.sort (a, b) ->\n                        for o in order\n                            f = compare(o)(a, b)\n                            if f then return f\n                        return 0\n\n                return copy\n\n            paginate: (array, offset, limit) ->\n                offset ?= 0\n                if offset >= array.length\n                    return []\n\n                if not limit? or offset + limit > array.length\n                    end = array.length\n                else\n                    end = offset + limit - 1\n\n                return array[offset..end]\n\n            # TODO\n            properties: (array, properties) ->\n                return array\n\n            fields: (array, fields) ->\n                if not fields?\n                    return array\n\n                if not angular.isArray(fields) then fields = [fields]\n\n                for element in array\n                    for key of element\n                        if key not in fields\n                            delete element[key]\n\n                return array\n\n            processUrl: (url) ->\n                $q (resolve, reject) =>\n                    [root, id, path...] = url.split('/')\n                    specification = SPECIFICATION[root]\n                    query = {}\n                    if path.length == 0\n                        id = dataUtilsService.numberOrString(id)\n                        if angular.isString(id) and specification.identifier\n                            query[specification.identifier] = id\n                            id = null\n                        resolve [root, query, id]\n                        return\n\n                    pathString = path.join('/')\n                    match = specification.paths.filter (p) ->\n                        replaced = p\n                            .replace ///#{SPECIFICATION.FIELDTYPES.IDENTIFIER}\\:\\w+///g, '[a-zA-Z]+'\n                            .replace ///#{SPECIFICATION.FIELDTYPES.NUMBER}\\:\\w+///g, '\\\\d+'\n                        ///^#{replaced}$///.test(pathString)\n                    .pop()\n                    if not match?\n                        throw new Error(\"No child path (#{path.join('/')}) found for root (#{root})\")\n\n                    match = match.split('/')\n\n                    if path.length % 2 is 0\n                        fieldValue = dataUtilsService.numberOrString path.pop()\n                        [fieldType, fieldName] = match.pop().split(':')\n                    tableName = path.pop()\n                    match.pop()\n                    parentFieldValue = dataUtilsService.numberOrString(path.pop() or id)\n                    parentFieldName = match.pop()?.split(':').pop() or SPECIFICATION[root].id\n                    parentName = match.pop() or root\n                    parentId = SPECIFICATION[parentName].id\n\n                    if fieldName is SPECIFICATION[tableName]?.id\n                        id = fieldValue\n                        resolve [tableName, query, id]\n                    else\n                        if parentFieldName isnt parentId\n                            splitted = url.split('/')\n                            nextUrl = splitted[...(if splitted.length % 2 == 0 then -2 else -1)].join('/')\n                            @get(nextUrl).then (array) ->\n                                query[parentId] = array[0][parentId]\n                                if fieldName? then query[fieldName] = fieldValue\n                                resolve [tableName, query, null]\n                        else\n                            query[parentFieldName] = parentFieldValue\n                            if fieldName? then query[fieldName] = fieldValue\n                            resolve [tableName, query, null]\n\n            processSpecification: (specification) ->\n                # IndexedDB tables\n                stores = {}\n                for name, s of specification\n                    if angular.isArray(s.fields)\n                        a = s.fields[..]\n                        i = a.indexOf(s.id)\n                        if i > -1 then a[i] = \"&#{a[i]}\"\n                        else a.unshift('++id')\n                        stores[name] = a.join(',')\n                return stores\n","class Rest extends Service\n    constructor: ($http, $q, API) ->\n        return new class RestService\n            execute: (config) ->\n                $q (resolve, reject) =>\n                    $http(config)\n                    .success (response) ->\n                        try\n                            data = angular.fromJson(response)\n                            resolve(data)\n                        catch e\n                            reject(e)\n                    .error (reason) -> reject(reason)\n\n            get: (url, params = {}) ->\n                config =\n                    method: 'GET'\n                    url: @parse(API, url)\n                    params: params\n                    headers:\n                      'Accept': 'application/json'\n\n                @execute(config)\n\n            post: (url, data = {}) ->\n                config =\n                    method: 'POST'\n                    url: @parse(API, url)\n                    data: data\n                    headers:\n                        'Content-Type': 'application/json'\n\n                @execute(config)\n\n            parse: (args...) ->\n                args.join('/').replace(/\\/\\//, '/')\n","class Socket extends Service\n    constructor: ($log, $q, $location, $window, webSocketBackendService) ->\n        return new class SocketService\n            # waiting queue\n            queue: []\n            # deferred object for resolving response promises\n            # map of id: promise\n            deferred: {}\n            # the onMessage(key, message) function will be called to handle an update message\n            onMessage: null\n            # the onClose() function will be called to handle the close event\n            onClose: null\n\n            open: ->\n                @socket ?= @getWebSocket()\n                # flush queue on open\n                @socket.onopen = => @flush()\n\n                @socket.onmessage = (message) =>\n                    try\n                        data = angular.fromJson(message.data)\n                        $log.debug('WS message', data)\n\n                        # response message\n                        if data._id?\n                            [message, error, id, code] = [data.msg, data.error, data._id, data.code]\n                            if code is 200 then @deferred[id]?.resolve(message)\n                            else @deferred[id]?.reject(error)\n                        # update message\n                        else\n                            [key, message] = [data.k, data.m]\n                            @onMessage?(key, message)\n\n                    catch e\n                        $log.error(e)\n\n                @socket.onclose = =>\n                    @onClose?()\n\n            close: ->\n                @socket?.close()\n\n            send: (data) ->\n                # add _id to each message\n                id = @nextId()\n                data._id = id\n                @deferred[id] ?= $q.defer()\n\n                data = angular.toJson(data)\n                # ReconnectingWebSocket does not put status constants on instance\n                if @socket.readyState is (@socket.OPEN or 1)\n                    $log.debug 'WS send', angular.fromJson(data)\n                    @socket.send(data)\n                else\n                    # if the WebSocket is not open yet, add the data to the queue\n                    @queue.push(data)\n\n                # return promise, which will be resolved once a response message has the same id\n                return @deferred[id].promise\n\n            flush: ->\n                # send all the data waiting in the queue\n                while data = @queue.shift()\n                    $log.debug 'WS send', angular.fromJson(data)\n                    @socket.send(data)\n\n            nextId: ->\n                @id ?= 0\n                @id = if @id < 1000 then @id + 1 else 0\n                return @id\n\n            getUrl: ->\n                host = $location.host()\n                port = if $location.port() is 80 then '' else ':' + $location.port()\n                return \"ws://#{host}#{port}/ws\"\n\n            # this function will be mocked in the tests\n            getWebSocket: ->\n                url = @getUrl()\n                # if testing, use fake implementation\n                if jasmine?\n                    return webSocketBackendService.getWebSocket()\n                # use ReconnectingWebSocket if available\n                # TODO write own implementation?\n                if $window.ReconnectingWebSocket?\n                    return new $window.ReconnectingWebSocket(url)\n                return new $window.WebSocket(url)\n","class WebSocketBackend extends Service\n    self = null\n    constructor: ->\n        self = @\n        @webSocket = new MockWebSocket()\n\n    sendQueue: []\n    receiveQueue: []\n    send: (message) ->\n        data = {data: message}\n        @sendQueue.push(data)\n\n    flush: ->\n        while message = @sendQueue.shift()\n            @webSocket.onmessage(message)\n\n    getWebSocket: ->\n        return @webSocket\n\n    # mocked WebSocket\n    class MockWebSocket\n        OPEN: 1\n        send: (message) ->\n            self.receiveQueue.push(message)\n        close: -> @onclose?()\n","class Tabex extends Service\n    constructor: ($log, $window, $q, $timeout, socketService, restService, dataUtilsService, indexedDBService, SPECIFICATION) ->\n        return new class TabexService\n            CHANNELS =\n                MASTER: '!sys.master'\n                REFRESH: '!sys.channels.refresh'\n\n            ROLES =\n                MASTER: 'bb.role.master'\n                SLAVE: 'bb.role.slave'\n            _ROLES: ROLES # used in testing\n\n            EVENTS =\n                READY: 'bb.event.ready'\n                UPDATE: 'bb.event.update'\n                NEW: 'bb.event.new'\n            EVENTS: EVENTS\n\n            client: $window.tabex.client()\n\n            constructor: ->\n                # the message handler will be called on update messages\n                socketService.onMessage = @messageHandler\n                # the close handler will be called on close event\n                # we need to resend the startConsuming messages for\n                # every tracked channels\n                socketService.onClose = @closeHandler\n\n                @initialRoleDeferred = $q.defer()\n                @initialRole = @initialRoleDeferred.promise\n\n                @client.on CHANNELS.MASTER, @masterHandler\n                @client.on CHANNELS.REFRESH, @refreshHandler\n\n                $window.onunload = $window.onbeforeunload = (e) =>\n                    @activatePaths()\n                    return null\n\n            getSpecification: (type) -> SPECIFICATION[type]\n\n            masterHandler: (data) =>\n                # the master handles the data requests and the WebSocket connection\n                if data.node_id is data.master_id\n                    @role = ROLES.MASTER\n                    @initialRoleDeferred.resolve()\n                    socketService.open()\n                else\n                    @role = ROLES.SLAVE\n                    @initialRoleDeferred.resolve()\n                    # close the WebSocket connection if it's open\n                    socketService.close()\n\n            refreshHandler: (data) =>\n                # wait for the role to be determined\n                @initialRole.then =>\n                    if @role is ROLES.MASTER then @masterRefreshHandler(data)\n\n            debounceTimeout: 100\n            # path: [query]\n            trackedPaths: {}\n            # consumed paths\n            consuming: {}\n            masterRefreshHandler: (data) ->\n                # debounce logic\n                if @timeoutPromise? then $timeout.cancel(@timeoutPromise)\n                @timeoutPromise = $timeout =>\n                    @activatePaths().then =>\n\n                        # filter channels by system channels (starts with `!sys.`)\n                        channels = data.channels.filter (c) -> c.indexOf('!sys.') != 0\n\n                        paths = {}\n                        for channel in channels\n                            try\n                                r = angular.fromJson(channel)\n                                paths[r.path] ?= []\n                                paths[r.path].push(r.query)\n                            catch e\n                                $log.error('channel is not a JSON string', channel)\n                                return\n\n                        @startConsumingAll(paths).then =>\n                            # send stopConsuming messages after we get response\n                            # for startConsuming messages, therefore no update\n                            # will be lost\n                            for path of @consuming\n                                if path not of paths\n                                    # unsubscribe removed paths\n                                    @stopConsuming(path)\n                                    delete @consuming[path]\n\n                            @trackedPaths = paths\n                            # load all tracked path into cache\n                            @loadAll(paths)\n\n                , @debounceTimeout\n\n            messageHandler: (key, message) =>\n                # ../type/id/event\n                [type, id, event] = key.split('/')[-3..]\n                # translate the event type\n                if event is 'new' then event = EVENTS.NEW\n                else event = EVENTS.UPDATE\n                # update the object in the db\n                indexedDBService.db[type].put(message).then =>\n                    # emit the event\n                    for path of @trackedPaths\n                        if ///^#{path.replace(/\\*/g, '(\\\\w+|\\\\d+)')}$///.test(key)\n                            for query in @trackedPaths[path]\n                                @emit path, query, event\n\n            closeHandler: =>\n                paths = angular.copy(@trackedPaths)\n                @trackedPaths = {}\n                @startConsumingAll(paths)\n\n            loadAll: (paths) ->\n                db = indexedDBService.db\n                db.paths.toArray().then (dbPaths) =>\n                    for path, queries of paths\n                        for query in queries\n                            @load(path, query, dbPaths)\n\n            load: (path, query, dbPaths = []) ->\n                $q (resolve, reject) =>\n                    db = indexedDBService.db\n\n                    t = dataUtilsService.type(path)\n                    specification = @getSpecification(t)\n                    # test if cached and active\n                    for dbPath in dbPaths\n                        dbPath.query = angular.fromJson(dbPath.query)\n                        inCache =\n                            (dbPath.path is path and\n                            (angular.equals(dbPath.query, query) or angular.equals(dbPath.query, {}))) or\n                            (dbPath.path is t and angular.equals(dbPath.query, {}))\n                        elapsed = new Date() - new Date(dbPath.lastActive)\n                        active = elapsed < 2000 or specification.static == true\n\n                        if inCache and active\n                            resolve()\n                            return\n\n                    restPath = dataUtilsService.restPath(path)\n                    [parentName, parentId] = @getParent(restPath)\n                    parentIdName = SPECIFICATION[parentName]?.id\n                    if parentIdName? then parentIdName = \"_#{parentIdName}\"\n                    restService.get(restPath, query).then (data) =>\n                        type = dataUtilsService.type(restPath)\n                        data = dataUtilsService.unWrap(data, type)\n                        db.transaction 'rw', db[type], ->\n                            if not angular.isArray(data) then data = [data]\n                            data.forEach (i) ->\n                                put = (element) ->\n                                    for k, v of element\n                                        if angular.isObject(element[k])\n                                            element[k] = angular.toJson(v)\n                                    db[type].put(element)\n\n                                idName = SPECIFICATION[type]?.id\n                                id = i[idName]\n                                if id?\n                                    db[type].get(id).then (e) ->\n                                        e = dataUtilsService.parse(e)\n                                        for k, v of i then e[k] = v\n                                        if parentIdName?\n                                            e[parentIdName] ?= []\n                                            if parentId not in e[parentIdName]\n                                                e[parentIdName].push(parentId)\n                                        put(e)\n                                    .catch ->\n                                        if parentIdName? then i[parentIdName] = [parentId]\n                                        put(i)\n                                else\n                                    if parentIdName? then i[parentIdName] = [parentId]\n                                    put(i)\n\n                        .then ->\n                            db.transaction 'rw', db.paths, ->\n                                # cached path informations\n                                db.paths.put {\n                                    path: path\n                                    query: angular.toJson(query)\n                                }\n                            .then -> resolve()\n                            .catch (error) -> reject(error)\n                        .catch (error) -> reject(error)\n                    , (error) -> reject(error)\n\n                .then =>\n                    @emit path, query, EVENTS.READY\n                , (error) =>\n                    $log.error(error)\n\n            getParent: (restPath) ->\n                path = restPath.split('/')\n                if path % 2 == 0 then path.pop()\n                path.pop()\n                id = dataUtilsService.numberOrString path.pop()\n                name = path.pop()\n                return [name, id]\n\n            activatePaths: ->\n                paths = angular.copy(@trackedPaths)\n                db = indexedDBService.db\n                db.transaction 'rw', db.paths, =>\n                    now = (new Date()).toString()\n                    for path, queries of paths\n                        for query in queries\n                            db.paths\n                            .where('[path+query]').equals([path,angular.toJson(query)])\n                            .modify('lastActive': now)\n\n            on: (options..., listener) ->\n                [path, query] = options\n                query = angular.copy(query) or {}\n                subscribe = query.subscribe\n                delete query.subscribe\n                # if subscribe is false, we just load the data\n                if subscribe == false\n                    indexedDBService.db.paths.toArray().then (dbPaths) =>\n                        @load(path, query, dbPaths).then -> listener(EVENTS.READY)\n                    return\n                # if subscribe is true, we subscribe on events\n                channel =\n                    path: path\n                    query: query\n                @client.on angular.toJson(channel), listener\n\n            off: (options..., listener) ->\n                [path, query] = options\n                query = angular.copy(query) or {}\n                delete query.subscribe\n\n                channel =\n                    path: path\n                    query: query\n                @client.off angular.toJson(channel), listener\n\n            emit: (options..., message) ->\n                [path, query] = options\n                channel =\n                    path: path\n                    query: query or {}\n                @client.emit angular.toJson(channel), message, true\n\n            startConsuming: (path) ->\n                socketService.send\n                    cmd: 'startConsuming'\n                    path: path\n\n            stopConsuming: (path) ->\n                socketService.send\n                    cmd: 'stopConsuming'\n                    path: path\n\n            startConsumingAll: (paths) ->\n                if angular.isArray(paths)\n                    socketPaths = paths[...]\n                else if angular.isObject(paths)\n                    socketPaths = Object.keys(paths)\n                else throw new Error('Parameter paths is not an object or an array')\n\n                # filter socket paths that are included in another paths\n                pathsToRemove = []\n                for p, i in socketPaths\n                    r = ///^#{p.replace(/\\*/g, '(\\\\w+|\\\\d+|\\\\*)')}$///\n                    for q, j in socketPaths\n                        if j != i and r.test(q) then pathsToRemove.push(q)\n                for p in pathsToRemove\n                    socketPaths.splice socketPaths.indexOf(p), 1\n\n                promises = []\n                for path in socketPaths\n                    if path not of @trackedPaths\n                        @consuming[path] = true\n                        promises.push @startConsuming(path)\n\n                return $q.all(promises)\n\n            mergePaths: (dest, src) ->\n                for path, queries of src\n                    dest[path] ?= []\n                    for query in queries\n                        if dest[path].filter (e) ->\n                            angular.equals(e, query)\n                        .length == 0\n                            dest[path].push(query)\n","class Collection extends Factory\n    constructor: ($q, $injector, $log, dataUtilsService, tabexService, indexedDBService, SPECIFICATION) ->\n        return class CollectionInstance extends Array\n            constructor: (restPath, query = {}) ->\n                @getRestPath = -> restPath\n                @getQuery = -> query\n                @getSocketPath = -> dataUtilsService.socketPath(restPath)\n                @getType = -> dataUtilsService.type(restPath)\n                @getEndpoint = -> dataUtilsService.endpointPath(restPath)\n                @getSpecification = -> SPECIFICATION[@getType()]\n                Wrapper = $injector.get('Wrapper')\n                @getWrapper = -> Wrapper\n\n                ready = $q.defer()\n                @getReadyDeferred = -> ready\n                @getReadyPromise = -> ready.promise\n\n            subscribe: ->\n                tabexService.on @getSocketPath(), @getQuery(), @listener\n                promise = @getReadyPromise()\n                promise.getArray = => return this\n                return promise\n\n            unsubscribe: ->\n                @forEach (e) -> e?.unsubscribe?()\n                tabexService.off @getSocketPath(), @getQuery(), @listener\n\n            listener: (event) =>\n                if event is tabexService.EVENTS.READY and @length != 0 then return\n                query = angular.copy(@getQuery())\n                delete query.subscribe\n                indexedDBService.get(@getRestPath(), query).then (data) =>\n                    if not angular.isArray(data) then data = [data]\n                    switch event\n                        when tabexService.EVENTS.READY then @readyHandler(data)\n                        when tabexService.EVENTS.UPDATE then @updateHandler(data)\n                        when tabexService.EVENTS.NEW then @newHandler(data)\n                        else $log.error('Unhandled tabex event', event)\n\n            readyHandler: (data) ->\n                @from(data)\n                @getReadyDeferred()?.resolve(@)\n\n            # add new elements and remove old ones\n            newHandler: (data) ->\n                id = @getSpecification().id\n                ids =\n                    new: data.map (e) -> e[id]\n                    old: @map (e) -> e[id]\n\n                # add new\n                data.forEach (e) => if e[id] not in ids.old then @add(e)\n\n                # delete old\n                @forEach (e) => if e[id] not in ids.new then @delete(e)\n\n            updateHandler: (data) ->\n                @newHandler(data)\n\n                id = @getSpecification().id\n                for e in data\n                    @forEach (i) -> if e[id] == i[id] then i.update(e)\n\n            from: (data) ->\n                # add items one by one\n                @add(i) for i in data\n\n            add: (element) ->\n                Wrapper = @getWrapper()\n                instance = new Wrapper(element, @getEndpoint(), @getQuery().subscribe)\n                @push(instance)\n\n            clear: ->\n                @pop() while @length > 0\n\n            delete: (element) ->\n                index = @indexOf(element)\n                if index > -1 then @splice(index, 1)\n","class Wrapper extends Factory\n    constructor: ($log, dataService, dataUtilsService, tabexService, SPECIFICATION) ->\n        return class WrapperInstance\n            constructor: (object, endpoint, @_subscribe) ->\n                if not angular.isString(endpoint)\n                    throw new TypeError(\"Parameter 'endpoint' must be a string, not #{typeof endpoint}\")\n                @_endpoint = endpoint\n\n                # add object fields to the instance\n                @update(object)\n\n                # generate getXXX, and loadXXX functions\n                endpoints = Object.keys(SPECIFICATION)\n                @constructor.generateFunctions(endpoints)\n\n            update: (o) ->\n                angular.merge(@, o)\n\n            get: (args...) ->\n                [root, id, path...] = @_endpoint.split('/')\n                [options..., last] = args\n                if angular.isObject(last)\n                    pathString = path.concat('*', options).join('/')\n                    if @_subscribe? then args[args.length - 1].subscribe ?= @_subscribe\n                else\n                    pathString = path.concat('*', args).join('/')\n                    if @_subscribe? then args.push(subscribe: @_subscribe)\n                if path.length == 0\n                    return dataService.get(@_endpoint, @getId(), args...)\n\n                specification = SPECIFICATION[root]\n                match = specification.paths.filter (p) ->\n                    replaced = p\n                        .replace ///\\w+\\:\\w+///g, '(\\\\*|\\\\w+|\\\\d+)'\n                    ///^#{replaced}$///.test(pathString)\n                .pop()\n                if not match?\n                    parameter = @getId()\n                else\n                    # second last element\n                    for e in match.split('/')[...-1] by -1\n                        if e.indexOf(':') > -1\n                            [fieldType, fieldName] = e.split(':')\n                            parameter = @[fieldName]\n                            break\n\n                dataService.get(@_endpoint, parameter, args...)\n\n            control: (method, params) ->\n                dataService.control(\"#{@_endpoint}/#{@getIdentifier() or @getId()}\", method, params)\n\n            # generate endpoint functions for the class\n            @generateFunctions: (endpoints) ->\n                endpoints.forEach (e) =>\n                    if e == e.toUpperCase() then return\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    # adds getXXX functions to the prototype\n                    @::[\"get#{E}\"] ?= (args...) ->\n                        return @get(e, args...)\n                    # adds loadXXX functions to the prototype\n                    @::[\"load#{E}\"] ?= (args...) ->\n                        p = @get(e, args...)\n                        @[e] = p.getArray()\n                        return p\n\n            getId: ->\n                @[@classId()]\n\n            getIdentifier: ->\n                @[@classIdentifier()]\n\n            classId: ->\n                SPECIFICATION[dataUtilsService.type(@_endpoint)].id\n\n            classIdentifier: ->\n                SPECIFICATION[dataUtilsService.type(@_endpoint)].identifier\n\n            unsubscribe: ->\n                e?.unsubscribe?() for _, e of this\n"],"sourceRoot":"/source/"}